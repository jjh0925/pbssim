// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// pbssim
List pbssim(NumericVector responses, NumericMatrix predictors, NumericVector initial_alpha, int degree, int number_interior_knots, int number_lambdas_alpha, int number_lambdas_beta, double lambda_alpha_max, double lambda_beta_max, double epsilon_lambda, int maxiter, double epsilon_iterations);
RcppExport SEXP _pbssim_pbssim(SEXP responsesSEXP, SEXP predictorsSEXP, SEXP initial_alphaSEXP, SEXP degreeSEXP, SEXP number_interior_knotsSEXP, SEXP number_lambdas_alphaSEXP, SEXP number_lambdas_betaSEXP, SEXP lambda_alpha_maxSEXP, SEXP lambda_beta_maxSEXP, SEXP epsilon_lambdaSEXP, SEXP maxiterSEXP, SEXP epsilon_iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type responses(responsesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type predictors(predictorsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initial_alpha(initial_alphaSEXP);
    Rcpp::traits::input_parameter< int >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< int >::type number_interior_knots(number_interior_knotsSEXP);
    Rcpp::traits::input_parameter< int >::type number_lambdas_alpha(number_lambdas_alphaSEXP);
    Rcpp::traits::input_parameter< int >::type number_lambdas_beta(number_lambdas_betaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_alpha_max(lambda_alpha_maxSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_beta_max(lambda_beta_maxSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon_lambda(epsilon_lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon_iterations(epsilon_iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(pbssim(responses, predictors, initial_alpha, degree, number_interior_knots, number_lambdas_alpha, number_lambdas_beta, lambda_alpha_max, lambda_beta_max, epsilon_lambda, maxiter, epsilon_iterations));
    return rcpp_result_gen;
END_RCPP
}
// bsplines
NumericMatrix bsplines(NumericVector x, NumericVector t, int degree, int derivative);
RcppExport SEXP _pbssim_bsplines(SEXP xSEXP, SEXP tSEXP, SEXP degreeSEXP, SEXP derivativeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< int >::type derivative(derivativeSEXP);
    rcpp_result_gen = Rcpp::wrap(bsplines(x, t, degree, derivative));
    return rcpp_result_gen;
END_RCPP
}
// bspline
NumericVector bspline(NumericVector x, NumericVector t, int degree, int j, int derivative);
RcppExport SEXP _pbssim_bspline(SEXP xSEXP, SEXP tSEXP, SEXP degreeSEXP, SEXP jSEXP, SEXP derivativeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< int >::type derivative(derivativeSEXP);
    rcpp_result_gen = Rcpp::wrap(bspline(x, t, degree, j, derivative));
    return rcpp_result_gen;
END_RCPP
}
// bsp
double bsp(double x, NumericVector t, int degree, int j);
RcppExport SEXP _pbssim_bsp(SEXP xSEXP, SEXP tSEXP, SEXP degreeSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(bsp(x, t, degree, j));
    return rcpp_result_gen;
END_RCPP
}
// dbsp
double dbsp(double x, NumericVector t, int degree, int j, int derivative);
RcppExport SEXP _pbssim_dbsp(SEXP xSEXP, SEXP tSEXP, SEXP degreeSEXP, SEXP jSEXP, SEXP derivativeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< int >::type derivative(derivativeSEXP);
    rcpp_result_gen = Rcpp::wrap(dbsp(x, t, degree, j, derivative));
    return rcpp_result_gen;
END_RCPP
}
// jump_bsplines
NumericMatrix jump_bsplines(NumericVector t, int degree);
RcppExport SEXP _pbssim_jump_bsplines(SEXP tSEXP, SEXP degreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type degree(degreeSEXP);
    rcpp_result_gen = Rcpp::wrap(jump_bsplines(t, degree));
    return rcpp_result_gen;
END_RCPP
}
// knots2t
NumericVector knots2t(NumericVector knots, int degree);
RcppExport SEXP _pbssim_knots2t(SEXP knotsSEXP, SEXP degreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type knots(knotsSEXP);
    Rcpp::traits::input_parameter< int >::type degree(degreeSEXP);
    rcpp_result_gen = Rcpp::wrap(knots2t(knots, degree));
    return rcpp_result_gen;
END_RCPP
}
// dim2knots
NumericVector dim2knots(NumericVector predictor, int dimension, int degree);
RcppExport SEXP _pbssim_dim2knots(SEXP predictorSEXP, SEXP dimensionSEXP, SEXP degreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type predictor(predictorSEXP);
    Rcpp::traits::input_parameter< int >::type dimension(dimensionSEXP);
    Rcpp::traits::input_parameter< int >::type degree(degreeSEXP);
    rcpp_result_gen = Rcpp::wrap(dim2knots(predictor, dimension, degree));
    return rcpp_result_gen;
END_RCPP
}
// NumericVectors
ListOf<NumericVector> NumericVectors(int size);
RcppExport SEXP _pbssim_NumericVectors(SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(NumericVectors(size));
    return rcpp_result_gen;
END_RCPP
}
// IntegerVectors
ListOf<IntegerVector> IntegerVectors(int size);
RcppExport SEXP _pbssim_IntegerVectors(SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(IntegerVectors(size));
    return rcpp_result_gen;
END_RCPP
}
// support_of_vector
IntegerVector support_of_vector(NumericVector v);
RcppExport SEXP _pbssim_support_of_vector(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(support_of_vector(v));
    return rcpp_result_gen;
END_RCPP
}
// bubble_order
IntegerVector bubble_order(NumericVector vec);
RcppExport SEXP _pbssim_bubble_order(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(bubble_order(vec));
    return rcpp_result_gen;
END_RCPP
}
// subsetNumVec
NumericVector subsetNumVec(NumericVector x, IntegerVector index);
RcppExport SEXP _pbssim_subsetNumVec(SEXP xSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(subsetNumVec(x, index));
    return rcpp_result_gen;
END_RCPP
}
// subsetIntVec
IntegerVector subsetIntVec(IntegerVector x, IntegerVector index);
RcppExport SEXP _pbssim_subsetIntVec(SEXP xSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(subsetIntVec(x, index));
    return rcpp_result_gen;
END_RCPP
}
// knot_candidate
NumericVector knot_candidate(NumericMatrix predictors, int knot_size);
RcppExport SEXP _pbssim_knot_candidate(SEXP predictorsSEXP, SEXP knot_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type predictors(predictorsSEXP);
    Rcpp::traits::input_parameter< int >::type knot_size(knot_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(knot_candidate(predictors, knot_size));
    return rcpp_result_gen;
END_RCPP
}
// norm_2
double norm_2(NumericVector u);
RcppExport SEXP _pbssim_norm_2(SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(norm_2(u));
    return rcpp_result_gen;
END_RCPP
}
// norm_square
double norm_square(NumericVector u);
RcppExport SEXP _pbssim_norm_square(SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(norm_square(u));
    return rcpp_result_gen;
END_RCPP
}
// zlambda
double zlambda(NumericVector a, double b, double c, NumericVector d, double lambda);
RcppExport SEXP _pbssim_zlambda(SEXP aSEXP, SEXP bSEXP, SEXP cSEXP, SEXP dSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(zlambda(a, b, c, d, lambda));
    return rcpp_result_gen;
END_RCPP
}
// delta
NumericVector delta(NumericVector d);
RcppExport SEXP _pbssim_delta(SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(delta(d));
    return rcpp_result_gen;
END_RCPP
}
// q_lambda_point
double q_lambda_point(double z, NumericVector a, double b, double c, NumericVector d, double lambda);
RcppExport SEXP _pbssim_q_lambda_point(SEXP zSEXP, SEXP aSEXP, SEXP bSEXP, SEXP cSEXP, SEXP dSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(q_lambda_point(z, a, b, c, d, lambda));
    return rcpp_result_gen;
END_RCPP
}
// lambdas_all_alpha
NumericVector lambdas_all_alpha(int number_lambdas_alpha, double lambda_alpha_max, double epsilon_lambda);
RcppExport SEXP _pbssim_lambdas_all_alpha(SEXP number_lambdas_alphaSEXP, SEXP lambda_alpha_maxSEXP, SEXP epsilon_lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type number_lambdas_alpha(number_lambdas_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_alpha_max(lambda_alpha_maxSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon_lambda(epsilon_lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(lambdas_all_alpha(number_lambdas_alpha, lambda_alpha_max, epsilon_lambda));
    return rcpp_result_gen;
END_RCPP
}
// lambdas_all_beta
NumericVector lambdas_all_beta(int number_lambdas, double lambda_beta_max, double epsilon_lambda);
RcppExport SEXP _pbssim_lambdas_all_beta(SEXP number_lambdasSEXP, SEXP lambda_beta_maxSEXP, SEXP epsilon_lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type number_lambdas(number_lambdasSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_beta_max(lambda_beta_maxSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon_lambda(epsilon_lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(lambdas_all_beta(number_lambdas, lambda_beta_max, epsilon_lambda));
    return rcpp_result_gen;
END_RCPP
}
// alpha2xi
NumericVector alpha2xi(NumericVector alpha);
RcppExport SEXP _pbssim_alpha2xi(SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(alpha2xi(alpha));
    return rcpp_result_gen;
END_RCPP
}
// xi2alpha
NumericVector xi2alpha(NumericVector xi);
RcppExport SEXP _pbssim_xi2alpha(SEXP xiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type xi(xiSEXP);
    rcpp_result_gen = Rcpp::wrap(xi2alpha(xi));
    return rcpp_result_gen;
END_RCPP
}
// deriv_xi_j
NumericVector deriv_xi_j(NumericVector xi, NumericVector alpha, int j);
RcppExport SEXP _pbssim_deriv_xi_j(SEXP xiSEXP, SEXP alphaSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(deriv_xi_j(xi, alpha, j));
    return rcpp_result_gen;
END_RCPP
}
// atan4
double atan4(double y, double x);
RcppExport SEXP _pbssim_atan4(SEXP ySEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(atan4(y, x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_pbssim_pbssim", (DL_FUNC) &_pbssim_pbssim, 12},
    {"_pbssim_bsplines", (DL_FUNC) &_pbssim_bsplines, 4},
    {"_pbssim_bspline", (DL_FUNC) &_pbssim_bspline, 5},
    {"_pbssim_bsp", (DL_FUNC) &_pbssim_bsp, 4},
    {"_pbssim_dbsp", (DL_FUNC) &_pbssim_dbsp, 5},
    {"_pbssim_jump_bsplines", (DL_FUNC) &_pbssim_jump_bsplines, 2},
    {"_pbssim_knots2t", (DL_FUNC) &_pbssim_knots2t, 2},
    {"_pbssim_dim2knots", (DL_FUNC) &_pbssim_dim2knots, 3},
    {"_pbssim_NumericVectors", (DL_FUNC) &_pbssim_NumericVectors, 1},
    {"_pbssim_IntegerVectors", (DL_FUNC) &_pbssim_IntegerVectors, 1},
    {"_pbssim_support_of_vector", (DL_FUNC) &_pbssim_support_of_vector, 1},
    {"_pbssim_bubble_order", (DL_FUNC) &_pbssim_bubble_order, 1},
    {"_pbssim_subsetNumVec", (DL_FUNC) &_pbssim_subsetNumVec, 2},
    {"_pbssim_subsetIntVec", (DL_FUNC) &_pbssim_subsetIntVec, 2},
    {"_pbssim_knot_candidate", (DL_FUNC) &_pbssim_knot_candidate, 2},
    {"_pbssim_norm_2", (DL_FUNC) &_pbssim_norm_2, 1},
    {"_pbssim_norm_square", (DL_FUNC) &_pbssim_norm_square, 1},
    {"_pbssim_zlambda", (DL_FUNC) &_pbssim_zlambda, 5},
    {"_pbssim_delta", (DL_FUNC) &_pbssim_delta, 1},
    {"_pbssim_q_lambda_point", (DL_FUNC) &_pbssim_q_lambda_point, 6},
    {"_pbssim_lambdas_all_alpha", (DL_FUNC) &_pbssim_lambdas_all_alpha, 3},
    {"_pbssim_lambdas_all_beta", (DL_FUNC) &_pbssim_lambdas_all_beta, 3},
    {"_pbssim_alpha2xi", (DL_FUNC) &_pbssim_alpha2xi, 1},
    {"_pbssim_xi2alpha", (DL_FUNC) &_pbssim_xi2alpha, 1},
    {"_pbssim_deriv_xi_j", (DL_FUNC) &_pbssim_deriv_xi_j, 3},
    {"_pbssim_atan4", (DL_FUNC) &_pbssim_atan4, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_pbssim(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
